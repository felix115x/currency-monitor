{% extends 'base.html.twig' %}

{% block body %}
{{ parent() }}
<div class='center-element'>
    <h1>Currency Exchange Rate Inspector</h1>
    <hr>
    <div id="wrapper" class='row'>
        <div class="col-sm-8">
            <h3>Monitoring Plot</h3>

            <canvas id="exchange_rate_plot" width="60%"></canvas>

        </div>
        <div class="col-sm-4">
            <h3>Currencies</h3>
            <ul class="list-group" id='selected_currencies'>
                {% for c in currencies %}
                    <li class="list-group-item">
                        <label for='{{ c }}'>{{ c }}</label>
                        <input class='float-right' type="checkbox" id='{{ c }}' name='{{ c }}'>
                    </li>
                {% endfor %}
            </ul>
        </div>
    </div>
</div>
{% endblock %}
{% block javascripts %}
{{ parent() }}
<script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js'></script>
<script>
const ctx = document.getElementById('exchange_rate_plot').getContext('2d');

let exchangeRates = {{ exchange_rates|json_encode|raw }};
let recentDates = {{ recent_dates|json_encode|raw }};

let dateLabels = recentDates.map( d => d.dateUpdated.date ).reverse();

generatePlot = function () {
    let currencies = [];
    $('#selected_currencies input:checked').each(function() {
        currencies.push($(this).attr('name'));
    });

    let rates = exchangeRates.map(d => {
        return {'guid': d.guid, 'jsonData': JSON.parse(d.rawData)};
    });

    let ratesByCurrency = currencies.map(c => {
        return {
            'label': c,
            'data': rates.map(r => {
                return r.jsonData.filter(d => {
                    if (d.code === c) {
                        return d.rate;
                    }
                })[0].rate;
            }).reverse(),
            'borderColor': getRandomColor(),
            'backgroundColor': 'transparent'
        };
    });

    let myChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: ratesByCurrency,
            labels: dateLabels
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
};

$('document').ready(generatePlot);
$('#selected_currencies input').change(generatePlot);

function getRandomColor() {
    let letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
</script>
{% endblock %}
